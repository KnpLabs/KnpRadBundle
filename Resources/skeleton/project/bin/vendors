#!/usr/bin/env php
<?php

set_time_limit(0);
chdir($rootDir = dirname(__DIR__));

$cacheDir  = $rootDir.'/cache';
$logsDir   = $rootDir.'/logs';
$vendorDir = $rootDir.'/vendor';

array_shift($argv);
if (!isset($argv[0])) {
    exit(<<<EOF
Symfony2 vendors script management.

Specify a command to run:

 install: install vendors as specified in composer.json or composer.lock (recommended)
 update:  update vendors to their latest versions (as specified in composer.json)

EOF
    );
}

if (!file_exists($cacheDir)) {
    mkdir($cacheDir, 0777, true);
}
if (!file_exists($logsDir)) {
    mkdir($logsDir, 0777, true);
}

if (!in_array($command = array_shift($argv), array('install', 'update'))) {
    exit(sprintf("Command \"%s\" does not exist.\n", $command));
}

// Download composer if not downloaded yet
if (!file_exists($cacheDir.'/composer.phar')) {
    file_put_contents($cacheDir.'/composer.phar',
        file_get_contents('http://getcomposer.org/composer.phar')
    );
}

// php on windows can't use the shebang line from system()
$interpreter = defined('PHP_WINDOWS_VERSION_BUILD') ? 'php.exe' : 'php';

// Install/update dependencies
system(sprintf('%s %s %s', $interpreter, escapeshellarg($cacheDir.'/composer.phar'), $command));

// Update configs and routings on --configs
if (in_array('--configs', $argv)) {
    system(sprintf('%s %s', $interpreter, escapeshellarg($rootDir.'/bin/configs')));
}

// Update assets
system(sprintf('%s %s assets:install', $interpreter, escapeshellarg($rootDir.'/console')));

// Remove the cache
system(sprintf('%s %s cache:clear --no-warmup', $interpreter, escapeshellarg($rootDir.'/console')));
